// Code generated by databridge-gen; DO NOT EDIT.
package databridge

import (
	"net/url"
	"strconv"
	"strings"
	"time"
)

func _db_parseBool(s string) (bool, error) { return strconv.ParseBool(strings.TrimSpace(s)) }
func _db_parseTimeFlexible(s string) (time.Time, bool) {
	s = strings.TrimSpace(s)
	if s == "" {
		return time.Time{}, false
	}
	formats := []string{time.RFC3339Nano, time.RFC3339, "2006-01-02 15:04:05", "2006-01-02"}
	for _, f := range formats {
		if t, err := time.Parse(f, s); err == nil {
			return t, true
		}
	}
	return time.Time{}, false
}
func BindOrderFromForm(vals url.Values) (Order, error) {
	out := Order{}
	if s := vals.Get("order_id"); s != "" {
		out.OrderID = s
	}
	if s := vals.Get("user_id"); s != "" {
		if i, err := strconv.ParseInt(strings.TrimSpace(s), 10, 64); err == nil {
			out.UserID = i
		}
	}
	if s := vals.Get("amount"); s != "" {
		if f64, err := strconv.ParseFloat(strings.TrimSpace(s), 64); err == nil {
			out.Amount = f64
		}
	}
	if s := vals.Get("paid"); s != "" {
		if b1, err := strconv.ParseBool(strings.TrimSpace(s)); err == nil {
			out.Paid = b1
		}
	}
	if vs, ok := vals["items"]; ok {
		out.Items = make([]string, 0, len(vs))
		for _, s := range vs {
			out.Items = append(out.Items, s)
		}
	}
	if s := vals.Get("created_at"); s != "" {
		if tt, ok := _db_parseTimeFlexible(s); ok {
			out.CreatedAt = tt
		}
	}
	return out, nil
}

func BindUserFromForm(vals url.Values) (User, error) {
	out := User{}
	if s := vals.Get("id"); s != "" {
		if i, err := strconv.ParseInt(strings.TrimSpace(s), 10, 64); err == nil {
			out.ID = i
		}
	}
	if s := vals.Get("name"); s != "" {
		out.Name = s
	}
	if s := vals.Get("email"); s != "" {
		out.Email = s
	}
	if s := vals.Get("active"); s != "" {
		if b1, err := strconv.ParseBool(strings.TrimSpace(s)); err == nil {
			out.Active = b1
		}
	}
	if vs, ok := vals["tags"]; ok {
		out.Tags = make([]string, 0, len(vs))
		for _, s := range vs {
			out.Tags = append(out.Tags, s)
		}
	}
	if s := vals.Get("created_at"); s != "" {
		if tt, ok := _db_parseTimeFlexible(s); ok {
			out.CreatedAt = tt
		}
	}
	if s := vals.Get("address.line1"); s != "" {
		out.Address.Line1 = s
	}
	if s := vals.Get("address.city"); s != "" {
		out.Address.City = s
	}
	if s := vals.Get("address.zip"); s != "" {
		out.Address.Zip = s
	}
	return out, nil
}
